datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum Role {
  ADMIN
  USER
}

model User {
  id         String @id @default(uuid())
  username   String @unique
  arabicName String
  password   String
  role       Role   @default(USER)

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt()
  invoices  Invoice[]

  accounts Account[]
  sessions Session[]

  @@map("users")
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("sessions")
}

model Product {
  id    String @id @default(uuid())
  name  String
  price Float

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()

  invoiceProducts InvoiceProduct[]
}

model Invoice {
  id         String  @id @default(uuid())
  totalPrice Float
  isPaid     Boolean

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  invoiceProducts InvoiceProduct[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()
}

model InvoiceProduct {
  id        String @id @default(uuid())
  invoiceId String
  productId String

  Invoice Invoice @relation(fields: [invoiceId], references: [id], onDelete: Cascade)
  Product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
}
